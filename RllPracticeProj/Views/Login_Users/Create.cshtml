@model RllPracticeProj.Models.Login_Users

@{
    ViewBag.Title = "Create";
}

<!DOCTYPE html>
<html>
<head>
    <title>Sign Up Page</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="https://www.techshenanigans.com/">Online Vaccine Management</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
    </nav>

    <div class="container">
        <div class="row">
            <div style="width: 40%; margin: 50px auto;">
                <h3 style="text-align: center;">Sign Up</h3>

                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()

                    <div class="form-group">
                        @Html.LabelFor(model => model.UserId)
                        @Html.EditorFor(model => model.UserId, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.UserId, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.EmailID)
                        @Html.EditorFor(model => model.EmailID, new { htmlAttributes = new { @class = "form-control", placeholder = "xyz@gmail.com" } })
                        @Html.ValidationMessageFor(model => model.EmailID, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Password)
                        @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", placeholder = "Password", oninput = "checkPasswordMatch()" } })
                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.Label("Confirm Password")
                        @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control", placeholder = "Confirm Password", oninput = "checkPasswordMatch()" })
                        @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.NumberOfDependents)
                        @Html.EditorFor(model => model.NumberOfDependents, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.NumberOfDependents, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        <button type="submit" class="btn btn-lg btn-success btn-block" id="signupButton" disabled>Sign Up</button>
                    </div>
                }

                <div class="mt-3">
                    <p class="text-center">Already have an account?</p>
                    <a href="@Url.Action("Login", "Login_Users")" class="btn btn-primary btn-block">Login</a>
                </div>
            </div>
        </div>
    </div>

    <script type="text/javascript">
        function checkPasswordMatch() {
            const password = document.querySelector("[name='Password']").value;
            const confirmPassword = document.querySelector("[name='ConfirmPassword']").value;
            const signupButton = document.getElementById("signupButton");

            if (password === confirmPassword && password !== '') {
                signupButton.disabled = false;
            } else {
                signupButton.disabled = true;
            }
        }
    </script>
</body>
</html>
